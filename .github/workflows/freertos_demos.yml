name: FreeRTOS Demos
on:
  push:
  pull_request:
  workflow_dispatch:

env:
  bashPass:   \033[32;1mPASSED -
  bashWarn:   \033[33;1mWARNING -
  bashFail:   \033[31;1mFAILED -
  bashEnd:    \033[0m

  pwshPass:   '`e[32;1mPASSED -'
  pwshWarn:   '`e[33;1mWARNING -'
  pwshFail:   '`e[31;1mFAILED -'
  pwshEnd:    '`e[0m'

jobs:
  WIN32-MSVC:
    name: WIN32 MSVC
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
          configuration:
            [
              {
                demo: WIN32-MSVC,
                demoVariant: FULL,
                buildCMD: "msbuild WIN32.sln -t:rebuild",
                successLine: "No errors - tick count"
              },
              {
                demo: WIN32-MSVC,
                demoVariant: BLINKY,
                buildCMD:
                  "$content = Get-Content -Path 'main.c' -Raw;
                  $newContent = $content -replace '#define\\s+mainCREATE_SIMPLE_BLINKY_DEMO_ONLY\\s+0', '#define mainCREATE_SIMPLE_BLINKY_DEMO_ONLY 1';
                  $newContent | Set-Content -Path 'main.c';
                  msbuild WIN32.sln -t:rebuild",
                successLine: "Message received from software timer",
              },
              {
                demo: WIN32-MSVC-Static-Allocation-Only,
                buildCMD: "msbuild WIN32.sln -t:rebuild",
                successLine: "No errors - tick count"
              },
          ]

    steps:
      - env:
          stepName: Checkout Repository
        name: ${{ env.stepName }}
        uses: actions/checkout@v3

      - env:
          stepName: Test Windows Bash Colours
        name: ${{ env.stepName }}
        id: test-windows-bash-colours
        shell: bash
        run: |
          # ${{ env.stepName }}
          echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          echo -e "${{ env.bashWarn }} ${{ env.stepName }} ${{ env.bashEnd }}"
          echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - env:
          stepName: Test Windows Pwsh Colours
        name: ${{ env.stepName }}
        id: test-windows-pwsh-colours
        run: |
          # ${{ env.stepName }}
          echo "${{ env.pwshPass }} ${{ env.stepName }} ${{ env.pwshEnd }}"
          echo "${{ env.pwshWarn }} ${{ env.stepName }} ${{ env.pwshEnd }}"
          echo "${{ env.pwshFail }} ${{ env.stepName }} ${{ env.pwshEnd }}"

      - env:
          stepName: MSVC Windows Setup
        name: ${{ env.stepName }}
        shell: bash
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          set +e
          git submodule update --checkout --init --depth 1 FreeRTOS/Source
          # Update main.c files to remove buffering of stdout.
          find . -name "main.c" | xargs sed -i -z "s/int[[:space:]]*main[[:space:]]*([[:space:]]*void[[:space:]]*)\n{/int main( void ){setvbuf( stdout, NULL, _IONBF, 0 );/g"
          exitStatus=$?
          set -e
          echo "::endgroup::"
          if [[ "$exitStatus" = "0" ]]; then
            echo -e "${{ env.bashPass }} ${{env.stepName}} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{env.stepName}} ${{ env.bashEnd }}"
            exit 1
          fi

      - env:
          stepName: Add msbuild to PATH
        name: ${{ env.stepName }}
        uses: microsoft/setup-msbuild@v1.1

      - env:
          stepName: Build Build ${{ matrix.configuration.demo}} ${{ matrix.configuration.demoVariant}} Demo
        name: ${{ env.stepName }}
        working-directory: FreeRTOS/Demo
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          cd ${{ matrix.configuration.demo }}
          ${{ matrix.configuration.buildCMD }}
          $exitStatus = $?
          echo "::endgroup::"
          if( $exitStatus -eq 1 ) {
            echo "${{ env.pwshPass }} ${{ env.stepName }} ${{ env.pwshEnd }}"
          } else {
            echo "${{ env.pwshFail }} ${{ env.stepName }} ${{ env.pwshEnd }}"
            exit 1
          }

      - env:
          stepName: Run and monitor ${{ matrix.configuration.demo}} ${{ matrix.configuration.demoVariant }} Demo
        name: ${{ env.stepName }}
        uses: Skptak/CI-CD-GitHub-Actions/executable-monitor@doublePrintFix
        with:
          exe-path: FreeRTOS/Demo/${{ matrix.configuration.demo }}/Debug/RTOSDemo.exe
          timeout-seconds: 60
          retry-attempts: 3
          success-line: ${{ matrix.configuration.successLine}}


  WIN32-MingW:
    name: WIN32 MingW
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
          configuration:
            [
              {
                demo: WIN32-MingW,
                demoVariant: FULL,
                buildCMD: make,
                successLine: "No errors - tick count"
              },
              {
                demo: WIN32-MingW,
                demoVariant: BLINKY,
                buildCMD:
                  "$content = Get-Content -Path 'main.c' -Raw;
                  $newContent = $content -replace '#define\\s+mainCREATE_SIMPLE_BLINKY_DEMO_ONLY\\s+0', '#define mainCREATE_SIMPLE_BLINKY_DEMO_ONLY  1';
                  $newContent | Set-Content -Path 'main.c';
                  make",
                successLine: "Message received from software timer",
              },
          ]
    steps:
      - env:
          stepName: Checkout Repository
        name: ${{ env.stepName }}
        uses: actions/checkout@v3

      - env:
          stepName: Fetch Kernel Submodule
        name: ${{ env.stepName }}
        shell: bash
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          set +e
          git submodule update --checkout --init --depth 1 FreeRTOS/Source
          # Update main.c files to remove buffering of stdout.
          find . -name "main.c" | xargs sed -i -z "s/int[[:space:]]*main[[:space:]]*([[:space:]]*void[[:space:]]*)\n{/int main( void ){setvbuf( stdout, NULL, _IONBF, 0 );/g"
          exitStatus=$?
          echo "::endgroup::"
          if [[ "$exitStatus" = "0" ]]; then
            echo -e "${{ env.bashPass }} ${{env.stepName}} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{env.stepName}} ${{ env.bashEnd }}"
            exit 1
          fi

      - env:
          stepName: Build Build ${{ matrix.configuration.demo}} ${{ matrix.configuration.demoVariant}} Demo
        name: ${{ env.stepName }}
        working-directory: FreeRTOS/Demo
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          cd ${{ matrix.configuration.demo }}
          ${{ matrix.configuration.buildCMD }}
          $exitStatus = $?
          echo "::endgroup::"
          if($exitStatus -eq 1) {
            echo "${{ env.pwshPass }} ${{ env.stepName }} ${{ env.pwshEnd }}"
          }else {
            echo "${{ env.pwshFail }} ${{ env.stepName }} ${{ env.pwshEnd }}"
            exit 1
          }

      - env:
          stepName: Run and monitor ${{ matrix.configuration.demo}} ${{ matrix.configuration.demoVariant }} Demo
        name: ${{ env.stepName }}
        uses: Skptak/CI-CD-GitHub-Actions/executable-monitor@doublePrintFix
        with:
          exe-path: FreeRTOS/Demo/${{ matrix.configuration.demo }}/build/RTOSDemo.exe
          timeout-seconds: 60
          retry-attempts: 3
          success-line: ${{ matrix.configuration.successLine}}

  POSIX-GCC:
    name: Posix GCC
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
          configuration:
            [
              {
                demo: Posix_GCC,
                demoVariant: BLINKY,
                buildCMD: make clean && make -j USER_DEMO=BLINKY_DEMO,
                successLine: "Message received from software timer"
              },
              {
                demo: Posix_GCC,
                demoVariant: FULL,
                buildCMD: make clean && make -j,
                successLine: "OK: No errors"
              },
          ]
    steps:
      - env:
          stepName: Checkout Repository
        name: ${{ env.stepName }}
        uses: actions/checkout@v3

      - env:
          stepName: Posix GCC Setup
        name: ${{ env.stepName }}
        shell: bash
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          # Sanity check to make sure that these don't cause errors when used elsewhere
          echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          echo -e "${{ env.bashWarn }} ${{ env.stepName }} ${{ env.bashEnd }}"
          echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
          git submodule update --checkout --init --depth 1 FreeRTOS/Source
          sudo apt-get -y update
          sudo apt-get -y install build-essential
          # Update main.c files to remove buffering of stdout.
          find . -name "main.c" | xargs sed -i -z "s/int[[:space:]]*main[[:space:]]*([[:space:]]*void[[:space:]]*)\n{/int main( void ){setvbuf( stdout, NULL, _IONBF, 0 );/g"
          exitStatus=$?
          echo "::endgroup::"
          if [ "$exitStatus" = "0" ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi

      - env:
          stepName: Build ${{ matrix.configuration.demo}} ${{ matrix.configuration.demoVariant}} Demo
        name: ${{ env.stepName }}
        shell: bash
        working-directory: FreeRTOS/Demo
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          set +e
          if [[ -d "${{ matrix.configuration.path }}" ]]; then
            cd ${{ matrix.configuration.path }}
          fi
          cd ${{ matrix.configuration.demo }}
          ${{ matrix.configuration.buildCMD }}
          exitStatus=$?
          echo "::endgroup::"
          if [ "$exitStatus" = "0" ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi

      - env:
          stepName: Run and monitor ${{ matrix.configuration.demo}} ${{ matrix.configuration.demoVariant }} Demo
        name: ${{ env.stepName }}
        uses: Skptak/CI-CD-GitHub-Actions/executable-monitor@doublePrintFix
        with:
          exe-path: FreeRTOS/Demo/${{ matrix.configuration.demo }}/build/posix_demo
          timeout-seconds: 60
          success-line: ${{ matrix.configuration.successLine}}

  MSP430-GCC:
    name: GNU MSP430 Toolchain
    runs-on: ubuntu-latest
    steps:
      - env:
          stepName: Checkout Repository
        name: ${{ env.stepName }}
        uses: actions/checkout@v3

      - env:
          stepName: Fetch Kernel Submodule
        name: ${{ env.stepName }}
        shell: bash
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          set +e
          git submodule update --checkout --init --depth 1 FreeRTOS/Source
          exitStatus=$?
          echo "::endgroup::"
          if [ "$exitStatus" = "0" ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi

      - env:
          stepName: Install MSP430 Toolchain
        name: ${{ env.stepName }}
        shell: bash
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          set +e
          sudo apt-get -y update
          sudo apt-get -y install gcc-msp430 build-essential
          exitStatus=$?
          echo "::endgroup::"
          if [ "$exitStatus" = "0" ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi

      - env:
          stepName: Build msp430_GCC Demo
        name: ${{ env.stepName }}
        shell: bash
        working-directory: FreeRTOS/Demo/msp430_GCC
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          set +e
          make -j
          exitStatus=$?
          echo "::endgroup::"
          if [ "$exitStatus" = "0" ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi

  ARM-GCC:
    name: GNU ARM Toolchain
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
          configuration:
            [
              {
                demo: CORTEX_MPU_M3_MPS2_QEMU_GCC,
                buildCMD: make clean && make -j
              },
              {
                demo: CORTEX_LM3S102_GCC,
                buildCMD: make clean && make -j
              },
              {
                demo: CORTEX_M3_MPS2_QEMU_GCC,
                buildCMD: make clean && make -j
              },
              {
                demo: CORTEX_M3_MPS2_QEMU_GCC,
                buildCMD: make clean && make -j FULL_DEMO=1
              },
              {
                demo: CORTEX_LM3S811_GCC,
                buildCMD: make clean && make -j
              },
              {
                demo: CORTEX_MPS2_QEMU_IAR_GCC,
                buildCMD: make -C build/gcc clean && make -C build/gcc -j
              },
              {
                demo: CORTEX_M0+_RP2040,
                path: ThirdParty/Community-Supported-Demos,
                buildCMD: "git clone https://github.com/raspberrypi/pico-sdk.git;
                          cmake -B build -DPICO_SDK_PATH=pico-sdk -GNinja;
                          ninja -C build --verbose;",
              },
          ]
    steps:
      - env:
          stepName: Checkout Repository
        name: ${{ env.stepName }}
        uses: actions/checkout@v3

      - env:
          stepName: Fetch Kernel Submodule
        name: ${{ env.stepName }}
        shell: bash
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          set +e
          git submodule update --checkout --init --depth 1 FreeRTOS/Source FreeRTOS/Demo/ThirdParty/Community-Supported-Demos
          exitStatus=$?
          echo "::endgroup::"
          if [ "$exitStatus" = "0" ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi

      - env:
          stepName: Install GNU ARM Toolchain
        name: Install GNU ARM Toolchain
        shell: bash
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          set +e
          sudo apt-get -y update
          sudo apt-get -y install gcc-arm-none-eabi build-essential cmake git ninja-build python3-minimal
          exitStatus=$?
          echo "::endgroup::"
          if [ "$exitStatus" = "0" ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi

      - env:
          stepName: Build ${{ matrix.configuration.demo}} Demo
        name: ${{ env.stepName}}
        shell: bash
        working-directory: FreeRTOS/Demo
        run: |
          # ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          set +e
          if [[ -d "${{ matrix.configuration.path }}" ]]; then
            cd ${{ matrix.configuration.path }}
          fi
          cd ${{ matrix.configuration.demo }}
          ${{ matrix.configuration.buildCMD }}
          exitStatus=$?
          echo "::endgroup::"
          if [ "$exitStatus" = "0" ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi
